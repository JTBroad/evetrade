/**
 * Not actually minified. Reconstructed to use localstorage.
 */

(function ( $ ) {

    function inputStoreSet(cname, cvalue) {
        window.localStorage.setItem(`inputStore-${cname}`, cvalue);
    };

    function inputStoreGet(cname) {
        result = window.localStorage.getItem(`inputStore-${cname}`);
        if(result === null) {
          return "";
        }
        return result;
    };

    function store(settings, type, dom) {
        if(type === "checkbox") {
          inputStoreSet(settings.name, $(dom).prop('checked'));
          if(settings.debug) {
            console.log("Previous Input for ["+settings.name+"] = ["+$(dom).prop('checked')+"]");
          }
        } else {
          inputStoreSet(settings.name, dom.value);
          if(settings.debug) {
            console.log("Previous Input for ["+settings.name+"] = ["+dom.value+"]");
          }
        }
    }

    $.fn.inputStore = function( options ) {

        // This is the easiest way to have default options.
        var settings = $.extend({
            name: this.attr("name"),
            debug: false
        }, options );

        var previousSet = inputStoreGet(settings.name);

        var type = this.attr("type") || this[0].nodeName;
        if(type && type == "checkbox" && previousSet == "true"){
          this.prop('checked', previousSet);
        } else {
          this.val(previousSet);
        }

        if(settings.debug) {
          console.log("Previous Input for ["+settings.name+"] = ["+previousSet+"]");
        }


        this.on('keyup', function(){
          store(settings, type, this);
        });

        this.on('change', function(){
          store(settings, type, this);
        });

        return this;
    };

}( jQuery ));